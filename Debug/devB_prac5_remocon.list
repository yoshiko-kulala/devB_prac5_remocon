
devB_prac5_remocon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002888  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002a6c  08002a6c  00012a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b14  08002b14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b14  08002b14  00012b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b1c  08002b1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08002b30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002b30  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000601a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014dc  00000000  00000000  0002604f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006d0  00000000  00000000  00027530  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000618  00000000  00000000  00027c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cc2c  00000000  00000000  00028218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006086  00000000  00000000  00044e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a6dd4  00000000  00000000  0004aeca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1c9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001aa0  00000000  00000000  000f1d1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002a54 	.word	0x08002a54

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002a54 	.word	0x08002a54

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <uart_putc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uart_putc(uint8_t c){
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
	char buf[1];
	buf[0]=c;
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8000536:	f107 010c 	add.w	r1, r7, #12
 800053a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800053e:	2201      	movs	r2, #1
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <uart_putc+0x28>)
 8000542:	f001 fe96 	bl	8002272 <HAL_UART_Transmit>
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	2000008c 	.word	0x2000008c

08000554 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == huart4.Instance) {	//Propo-receive Interrupts
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b4c      	ldr	r3, [pc, #304]	; (8000694 <HAL_UART_RxCpltCallback+0x140>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	429a      	cmp	r2, r3
 8000566:	f040 8090 	bne.w	800068a <HAL_UART_RxCpltCallback+0x136>
		HAL_UART_Receive_IT(&huart4, rcData, 18);
 800056a:	2212      	movs	r2, #18
 800056c:	494a      	ldr	r1, [pc, #296]	; (8000698 <HAL_UART_RxCpltCallback+0x144>)
 800056e:	4849      	ldr	r0, [pc, #292]	; (8000694 <HAL_UART_RxCpltCallback+0x140>)
 8000570:	f001 ff11 	bl	8002396 <HAL_UART_Receive_IT>
		//HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 8000574:	4b48      	ldr	r3, [pc, #288]	; (8000698 <HAL_UART_RxCpltCallback+0x144>)
 8000576:	785b      	ldrb	r3, [r3, #1]
 8000578:	021b      	lsls	r3, r3, #8
 800057a:	b21b      	sxth	r3, r3
 800057c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000580:	b21a      	sxth	r2, r3
 8000582:	4b45      	ldr	r3, [pc, #276]	; (8000698 <HAL_UART_RxCpltCallback+0x144>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	b21b      	sxth	r3, r3
 8000588:	4313      	orrs	r3, r2
 800058a:	b21a      	sxth	r2, r3
 800058c:	4b43      	ldr	r3, [pc, #268]	; (800069c <HAL_UART_RxCpltCallback+0x148>)
 800058e:	801a      	strh	r2, [r3, #0]
		rc.ch1 -= 1024;
 8000590:	4b42      	ldr	r3, [pc, #264]	; (800069c <HAL_UART_RxCpltCallback+0x148>)
 8000592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000596:	b29b      	uxth	r3, r3
 8000598:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800059c:	b29b      	uxth	r3, r3
 800059e:	b21a      	sxth	r2, r3
 80005a0:	4b3e      	ldr	r3, [pc, #248]	; (800069c <HAL_UART_RxCpltCallback+0x148>)
 80005a2:	801a      	strh	r2, [r3, #0]
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 80005a4:	4b3c      	ldr	r3, [pc, #240]	; (8000698 <HAL_UART_RxCpltCallback+0x144>)
 80005a6:	789b      	ldrb	r3, [r3, #2]
 80005a8:	015b      	lsls	r3, r3, #5
 80005aa:	b21b      	sxth	r3, r3
 80005ac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80005b0:	b21a      	sxth	r2, r3
 80005b2:	4b39      	ldr	r3, [pc, #228]	; (8000698 <HAL_UART_RxCpltCallback+0x144>)
 80005b4:	785b      	ldrb	r3, [r3, #1]
 80005b6:	08db      	lsrs	r3, r3, #3
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	b21b      	sxth	r3, r3
 80005bc:	4313      	orrs	r3, r2
 80005be:	b21a      	sxth	r2, r3
 80005c0:	4b36      	ldr	r3, [pc, #216]	; (800069c <HAL_UART_RxCpltCallback+0x148>)
 80005c2:	805a      	strh	r2, [r3, #2]
		rc.ch2 -= 1024;
 80005c4:	4b35      	ldr	r3, [pc, #212]	; (800069c <HAL_UART_RxCpltCallback+0x148>)
 80005c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	b21a      	sxth	r2, r3
 80005d4:	4b31      	ldr	r3, [pc, #196]	; (800069c <HAL_UART_RxCpltCallback+0x148>)
 80005d6:	805a      	strh	r2, [r3, #2]
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2)
 80005d8:	4b2f      	ldr	r3, [pc, #188]	; (8000698 <HAL_UART_RxCpltCallback+0x144>)
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	029b      	lsls	r3, r3, #10
 80005de:	b21b      	sxth	r3, r3
 80005e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005e4:	b21a      	sxth	r2, r3
 80005e6:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <HAL_UART_RxCpltCallback+0x144>)
 80005e8:	78db      	ldrb	r3, [r3, #3]
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	b21b      	sxth	r3, r3
 80005ee:	4313      	orrs	r3, r2
 80005f0:	b21a      	sxth	r2, r3
				| (rcData[2] >> 6));
 80005f2:	4b29      	ldr	r3, [pc, #164]	; (8000698 <HAL_UART_RxCpltCallback+0x144>)
 80005f4:	789b      	ldrb	r3, [r3, #2]
 80005f6:	099b      	lsrs	r3, r3, #6
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	b21b      	sxth	r3, r3
 80005fc:	4313      	orrs	r3, r2
 80005fe:	b21a      	sxth	r2, r3
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2)
 8000600:	4b26      	ldr	r3, [pc, #152]	; (800069c <HAL_UART_RxCpltCallback+0x148>)
 8000602:	809a      	strh	r2, [r3, #4]
		rc.ch3 -= 1024;
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <HAL_UART_RxCpltCallback+0x148>)
 8000606:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800060a:	b29b      	uxth	r3, r3
 800060c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000610:	b29b      	uxth	r3, r3
 8000612:	b21a      	sxth	r2, r3
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <HAL_UART_RxCpltCallback+0x148>)
 8000616:	809a      	strh	r2, [r3, #4]
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <HAL_UART_RxCpltCallback+0x144>)
 800061a:	795b      	ldrb	r3, [r3, #5]
 800061c:	01db      	lsls	r3, r3, #7
 800061e:	b21b      	sxth	r3, r3
 8000620:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8000624:	b21a      	sxth	r2, r3
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <HAL_UART_RxCpltCallback+0x144>)
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	085b      	lsrs	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	b21b      	sxth	r3, r3
 8000630:	4313      	orrs	r3, r2
 8000632:	b21a      	sxth	r2, r3
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <HAL_UART_RxCpltCallback+0x148>)
 8000636:	80da      	strh	r2, [r3, #6]
		rc.ch4 -= 1024;
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <HAL_UART_RxCpltCallback+0x148>)
 800063a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800063e:	b29b      	uxth	r3, r3
 8000640:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000644:	b29b      	uxth	r3, r3
 8000646:	b21a      	sxth	r2, r3
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <HAL_UART_RxCpltCallback+0x148>)
 800064a:	80da      	strh	r2, [r3, #6]
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_UART_RxCpltCallback+0x144>)
 800064e:	795b      	ldrb	r3, [r3, #5]
 8000650:	111b      	asrs	r3, r3, #4
 8000652:	b2db      	uxtb	r3, r3
 8000654:	f003 0303 	and.w	r3, r3, #3
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <HAL_UART_RxCpltCallback+0x148>)
 800065c:	721a      	strb	r2, [r3, #8]
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <HAL_UART_RxCpltCallback+0x144>)
 8000660:	795b      	ldrb	r3, [r3, #5]
 8000662:	099b      	lsrs	r3, r3, #6
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <HAL_UART_RxCpltCallback+0x148>)
 8000668:	725a      	strb	r2, [r3, #9]
		rc.rol = ((rcData[17] << 8) | rcData[16]) - 1024;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <HAL_UART_RxCpltCallback+0x144>)
 800066c:	7c5b      	ldrb	r3, [r3, #17]
 800066e:	021b      	lsls	r3, r3, #8
 8000670:	b21a      	sxth	r2, r3
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <HAL_UART_RxCpltCallback+0x144>)
 8000674:	7c1b      	ldrb	r3, [r3, #16]
 8000676:	b21b      	sxth	r3, r3
 8000678:	4313      	orrs	r3, r2
 800067a:	b21b      	sxth	r3, r3
 800067c:	b29b      	uxth	r3, r3
 800067e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000682:	b29b      	uxth	r3, r3
 8000684:	b21a      	sxth	r2, r3
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <HAL_UART_RxCpltCallback+0x148>)
 8000688:	815a      	strh	r2, [r3, #10]
	}
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000038 	.word	0x20000038
 8000698:	20000078 	.word	0x20000078
 800069c:	2000002c 	.word	0x2000002c

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	xdev_out(uart_putc);
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <main+0x90>)
 80006a6:	4a23      	ldr	r2, [pc, #140]	; (8000734 <main+0x94>)
 80006a8:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006aa:	f000 fc7d 	bl	8000fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ae:	f000 f857 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b2:	f000 f8f7 	bl	80008a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006b6:	f000 f8cb 	bl	8000850 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80006ba:	f000 f89f 	bl	80007fc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart4, rcData, 18);
 80006be:	2212      	movs	r2, #18
 80006c0:	491d      	ldr	r1, [pc, #116]	; (8000738 <main+0x98>)
 80006c2:	481e      	ldr	r0, [pc, #120]	; (800073c <main+0x9c>)
 80006c4:	f001 fe67 	bl	8002396 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  xprintf("rc.ch1->%d\r\n",rc.ch1);
 80006c8:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <main+0xa0>)
 80006ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ce:	4619      	mov	r1, r3
 80006d0:	481c      	ldr	r0, [pc, #112]	; (8000744 <main+0xa4>)
 80006d2:	f000 fc33 	bl	8000f3c <xprintf>
	  xprintf("rc.ch2->%d\r\n",rc.ch2);
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <main+0xa0>)
 80006d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80006dc:	4619      	mov	r1, r3
 80006de:	481a      	ldr	r0, [pc, #104]	; (8000748 <main+0xa8>)
 80006e0:	f000 fc2c 	bl	8000f3c <xprintf>
	  xprintf("rc.ch3->%d\r\n",rc.ch3);
 80006e4:	4b16      	ldr	r3, [pc, #88]	; (8000740 <main+0xa0>)
 80006e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80006ea:	4619      	mov	r1, r3
 80006ec:	4817      	ldr	r0, [pc, #92]	; (800074c <main+0xac>)
 80006ee:	f000 fc25 	bl	8000f3c <xprintf>
	  xprintf("rc.ch4->%d\r\n",rc.ch4);
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <main+0xa0>)
 80006f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4815      	ldr	r0, [pc, #84]	; (8000750 <main+0xb0>)
 80006fc:	f000 fc1e 	bl	8000f3c <xprintf>
	  xprintf("rc.sw1->%d\r\n",rc.sw1);
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <main+0xa0>)
 8000702:	7a1b      	ldrb	r3, [r3, #8]
 8000704:	4619      	mov	r1, r3
 8000706:	4813      	ldr	r0, [pc, #76]	; (8000754 <main+0xb4>)
 8000708:	f000 fc18 	bl	8000f3c <xprintf>
	  xprintf("rc.sw2->%d\r\n",rc.sw2);
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <main+0xa0>)
 800070e:	7a5b      	ldrb	r3, [r3, #9]
 8000710:	4619      	mov	r1, r3
 8000712:	4811      	ldr	r0, [pc, #68]	; (8000758 <main+0xb8>)
 8000714:	f000 fc12 	bl	8000f3c <xprintf>
	  xprintf("rc.rol->%d\r\n",rc.rol);
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <main+0xa0>)
 800071a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800071e:	4619      	mov	r1, r3
 8000720:	480e      	ldr	r0, [pc, #56]	; (800075c <main+0xbc>)
 8000722:	f000 fc0b 	bl	8000f3c <xprintf>
	  HAL_Delay(30);
 8000726:	201e      	movs	r0, #30
 8000728:	f000 fca0 	bl	800106c <HAL_Delay>
	  xprintf("rc.ch1->%d\r\n",rc.ch1);
 800072c:	e7cc      	b.n	80006c8 <main+0x28>
 800072e:	bf00      	nop
 8000730:	200000d0 	.word	0x200000d0
 8000734:	08000529 	.word	0x08000529
 8000738:	20000078 	.word	0x20000078
 800073c:	20000038 	.word	0x20000038
 8000740:	2000002c 	.word	0x2000002c
 8000744:	08002a6c 	.word	0x08002a6c
 8000748:	08002a7c 	.word	0x08002a7c
 800074c:	08002a8c 	.word	0x08002a8c
 8000750:	08002a9c 	.word	0x08002a9c
 8000754:	08002aac 	.word	0x08002aac
 8000758:	08002abc 	.word	0x08002abc
 800075c:	08002acc 	.word	0x08002acc

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0318 	add.w	r3, r7, #24
 800076a:	2238      	movs	r2, #56	; 0x38
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f002 f968 	bl	8002a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000790:	2301      	movs	r3, #1
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 0318 	add.w	r3, r7, #24
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 f805 	bl	80017c0 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80007bc:	f000 f8c8 	bl	8000950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2102      	movs	r1, #2
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fb06 	bl	8001dec <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007e6:	f000 f8b3 	bl	8000950 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80007ea:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <SystemClock_Config+0x98>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
}
 80007f0:	bf00      	nop
 80007f2:	3750      	adds	r7, #80	; 0x50
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	42420070 	.word	0x42420070

080007fc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_UART4_Init+0x48>)
 8000802:	4a11      	ldr	r2, [pc, #68]	; (8000848 <MX_UART4_Init+0x4c>)
 8000804:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_UART4_Init+0x48>)
 8000808:	4a10      	ldr	r2, [pc, #64]	; (800084c <MX_UART4_Init+0x50>)
 800080a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <MX_UART4_Init+0x48>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_UART4_Init+0x48>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_UART4_Init+0x48>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_UART4_Init+0x48>)
 8000820:	220c      	movs	r2, #12
 8000822:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_UART4_Init+0x48>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_UART4_Init+0x48>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_UART4_Init+0x48>)
 8000832:	f001 fcd1 	bl	80021d8 <HAL_UART_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_UART4_Init+0x44>
  {
    Error_Handler();
 800083c:	f000 f888 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000038 	.word	0x20000038
 8000848:	40004c00 	.word	0x40004c00
 800084c:	000186a0 	.word	0x000186a0

08000850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <MX_USART2_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000888:	f001 fca6 	bl	80021d8 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000892:	f000 f85d 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000008c 	.word	0x2000008c
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b8:	4b23      	ldr	r3, [pc, #140]	; (8000948 <MX_GPIO_Init+0xa4>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a22      	ldr	r2, [pc, #136]	; (8000948 <MX_GPIO_Init+0xa4>)
 80008be:	f043 0320 	orr.w	r3, r3, #32
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b20      	ldr	r3, [pc, #128]	; (8000948 <MX_GPIO_Init+0xa4>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0320 	and.w	r3, r3, #32
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_GPIO_Init+0xa4>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_GPIO_Init+0xa4>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_GPIO_Init+0xa4>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_GPIO_Init+0xa4>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a16      	ldr	r2, [pc, #88]	; (8000948 <MX_GPIO_Init+0xa4>)
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_GPIO_Init+0xa4>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0308 	and.w	r3, r3, #8
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_GPIO_Init+0xa4>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a10      	ldr	r2, [pc, #64]	; (8000948 <MX_GPIO_Init+0xa4>)
 8000906:	f043 0310 	orr.w	r3, r3, #16
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_GPIO_Init+0xa4>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0310 	and.w	r3, r3, #16
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2103      	movs	r1, #3
 800091c:	480b      	ldr	r0, [pc, #44]	; (800094c <MX_GPIO_Init+0xa8>)
 800091e:	f000 ff37 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000922:	2303      	movs	r3, #3
 8000924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2302      	movs	r3, #2
 8000930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	4619      	mov	r1, r3
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_GPIO_Init+0xa8>)
 800093a:	f000 fdcf 	bl	80014dc <HAL_GPIO_Init>

}
 800093e:	bf00      	nop
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000
 800094c:	40010c00 	.word	0x40010c00

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_MspInit+0x5c>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <HAL_MspInit+0x5c>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6193      	str	r3, [r2, #24]
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_MspInit+0x5c>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_MspInit+0x5c>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_MspInit+0x5c>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	61d3      	str	r3, [r2, #28]
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_MspInit+0x5c>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <HAL_MspInit+0x60>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <HAL_MspInit+0x60>)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40010000 	.word	0x40010000

080009c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0318 	add.w	r3, r7, #24
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a3b      	ldr	r2, [pc, #236]	; (8000ac8 <HAL_UART_MspInit+0x108>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d13a      	bne.n	8000a56 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80009e0:	4b3a      	ldr	r3, [pc, #232]	; (8000acc <HAL_UART_MspInit+0x10c>)
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	4a39      	ldr	r2, [pc, #228]	; (8000acc <HAL_UART_MspInit+0x10c>)
 80009e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009ea:	61d3      	str	r3, [r2, #28]
 80009ec:	4b37      	ldr	r3, [pc, #220]	; (8000acc <HAL_UART_MspInit+0x10c>)
 80009ee:	69db      	ldr	r3, [r3, #28]
 80009f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f8:	4b34      	ldr	r3, [pc, #208]	; (8000acc <HAL_UART_MspInit+0x10c>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a33      	ldr	r2, [pc, #204]	; (8000acc <HAL_UART_MspInit+0x10c>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b31      	ldr	r3, [pc, #196]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0310 	and.w	r3, r3, #16
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1e:	f107 0318 	add.w	r3, r7, #24
 8000a22:	4619      	mov	r1, r3
 8000a24:	482a      	ldr	r0, [pc, #168]	; (8000ad0 <HAL_UART_MspInit+0x110>)
 8000a26:	f000 fd59 	bl	80014dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a38:	f107 0318 	add.w	r3, r7, #24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4824      	ldr	r0, [pc, #144]	; (8000ad0 <HAL_UART_MspInit+0x110>)
 8000a40:	f000 fd4c 	bl	80014dc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	2034      	movs	r0, #52	; 0x34
 8000a4a:	f000 fc08 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000a4e:	2034      	movs	r0, #52	; 0x34
 8000a50:	f000 fc21 	bl	8001296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a54:	e034      	b.n	8000ac0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <HAL_UART_MspInit+0x114>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d12f      	bne.n	8000ac0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000a62:	69db      	ldr	r3, [r3, #28]
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6a:	61d3      	str	r3, [r2, #28]
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000a6e:	69db      	ldr	r3, [r3, #28]
 8000a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a13      	ldr	r2, [pc, #76]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a90:	2304      	movs	r3, #4
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <HAL_UART_MspInit+0x118>)
 8000aa4:	f000 fd1a 	bl	80014dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 0318 	add.w	r3, r7, #24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <HAL_UART_MspInit+0x118>)
 8000abc:	f000 fd0e 	bl	80014dc <HAL_GPIO_Init>
}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40004c00 	.word	0x40004c00
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40011000 	.word	0x40011000
 8000ad4:	40004400 	.word	0x40004400
 8000ad8:	40010800 	.word	0x40010800

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <HardFault_Handler+0x4>

08000aee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <MemManage_Handler+0x4>

08000af4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <BusFault_Handler+0x4>

08000afa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <UsageFault_Handler+0x4>

08000b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b28:	f000 fa84 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <UART4_IRQHandler+0x10>)
 8000b36:	f001 fc83 	bl	8002440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000038 	.word	0x20000038

08000b44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b0a      	cmp	r3, #10
 8000b5e:	d102      	bne.n	8000b66 <xputc+0x16>
 8000b60:	200d      	movs	r0, #13
 8000b62:	f7ff fff5 	bl	8000b50 <xputc>

	if (outptr) {		/* Destination is memory */
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <xputc+0x48>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d007      	beq.n	8000b7e <xputc+0x2e>
		*outptr++ = (unsigned char)c;
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <xputc+0x48>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	4908      	ldr	r1, [pc, #32]	; (8000b98 <xputc+0x48>)
 8000b76:	600a      	str	r2, [r1, #0]
 8000b78:	79fa      	ldrb	r2, [r7, #7]
 8000b7a:	701a      	strb	r2, [r3, #0]
		return;
 8000b7c:	e008      	b.n	8000b90 <xputc+0x40>
	}
	if (xfunc_out) {	/* Destination is device */
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <xputc+0x4c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d004      	beq.n	8000b90 <xputc+0x40>
		xfunc_out((unsigned char)c);
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <xputc+0x4c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	79fa      	ldrb	r2, [r7, #7]
 8000b8c:	4610      	mov	r0, r2
 8000b8e:	4798      	blx	r3
	}
}
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000028 	.word	0x20000028
 8000b9c:	200000d0 	.word	0x200000d0

08000ba0 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000ba8:	e006      	b.n	8000bb8 <xputs+0x18>
		xputc(*str++);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	1c5a      	adds	r2, r3, #1
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ffcc 	bl	8000b50 <xputc>
	while (*str) {
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1f4      	bne.n	8000baa <xputs+0xa>
	}
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b094      	sub	sp, #80	; 0x50
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
	unsigned long vs;
#endif


	for (;;) {
		c = *fmt++;					/* Get a format character */
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	1c5a      	adds	r2, r3, #1
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!c) break;				/* End of format? */
 8000bde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 81a3 	beq.w	8000f2e <xvprintf+0x366>
		if (c != '%') {				/* Pass it through if not a % sequense */
 8000be8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000bec:	2b25      	cmp	r3, #37	; 0x25
 8000bee:	d005      	beq.n	8000bfc <xvprintf+0x34>
			xputc(c); continue;
 8000bf0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ffab 	bl	8000b50 <xputc>
 8000bfa:	e197      	b.n	8000f2c <xvprintf+0x364>
		}
		f = w = 0;					/* Clear parms */
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8000c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
		c = *fmt++;					/* Get first char of the sequense */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	1c5a      	adds	r2, r3, #1
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (c == '0') {				/* Flag: left '0' padded */
 8000c10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c14:	2b30      	cmp	r3, #48	; 0x30
 8000c16:	d108      	bne.n	8000c2a <xvprintf+0x62>
			f = 1; c = *fmt++;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000c28:	e00b      	b.n	8000c42 <xvprintf+0x7a>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8000c2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c2e:	2b2d      	cmp	r3, #45	; 0x2d
 8000c30:	d107      	bne.n	8000c42 <xvprintf+0x7a>
				f = 2; c = *fmt++;
 8000c32:	2302      	movs	r3, #2
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 8000c42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c46:	2b2a      	cmp	r3, #42	; 0x2a
 8000c48:	d126      	bne.n	8000c98 <xvprintf+0xd0>
			n = va_arg(arp, int);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	1d1a      	adds	r2, r3, #4
 8000c4e:	603a      	str	r2, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	63bb      	str	r3, [r7, #56]	; 0x38
			if (n < 0) {			/* Flag: left justified */
 8000c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	da04      	bge.n	8000c64 <xvprintf+0x9c>
				n = 0 - n;
 8000c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c5c:	425b      	negs	r3, r3
 8000c5e:	63bb      	str	r3, [r7, #56]	; 0x38
				f = 2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			w = n; c = *fmt++;
 8000c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c66:	643b      	str	r3, [r7, #64]	; 0x40
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000c74:	e018      	b.n	8000ca8 <xvprintf+0xe0>
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 8000c76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000c78:	4613      	mov	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	4413      	add	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	461a      	mov	r2, r3
 8000c82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c86:	4413      	add	r3, r2
 8000c88:	3b30      	subs	r3, #48	; 0x30
 8000c8a:	643b      	str	r3, [r7, #64]	; 0x40
				c = *fmt++;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			while (c >= '0' && c <= '9') {	/* Minimum width */
 8000c98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c9c:	2b2f      	cmp	r3, #47	; 0x2f
 8000c9e:	d903      	bls.n	8000ca8 <xvprintf+0xe0>
 8000ca0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ca4:	2b39      	cmp	r3, #57	; 0x39
 8000ca6:	d9e6      	bls.n	8000c76 <xvprintf+0xae>
			}
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long */
 8000ca8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cac:	2b6c      	cmp	r3, #108	; 0x6c
 8000cae:	d003      	beq.n	8000cb8 <xvprintf+0xf0>
 8000cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cb4:	2b4c      	cmp	r3, #76	; 0x4c
 8000cb6:	d109      	bne.n	8000ccc <xvprintf+0x104>
			f |= 4; c = *fmt++;
 8000cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (c == 'l' || c == 'L') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 8000ccc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 812e 	beq.w	8000f32 <xvprintf+0x36a>
		d = c;
 8000cd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cda:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (d >= 'a') d -= 0x20;
 8000cde:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000ce2:	2b60      	cmp	r3, #96	; 0x60
 8000ce4:	d904      	bls.n	8000cf0 <xvprintf+0x128>
 8000ce6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000cea:	3b20      	subs	r3, #32
 8000cec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		switch (d) {				/* Type is... */
 8000cf0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000cf4:	3b42      	subs	r3, #66	; 0x42
 8000cf6:	2b16      	cmp	r3, #22
 8000cf8:	d873      	bhi.n	8000de2 <xvprintf+0x21a>
 8000cfa:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <xvprintf+0x138>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000dcb 	.word	0x08000dcb
 8000d04:	08000db9 	.word	0x08000db9
 8000d08:	08000dd7 	.word	0x08000dd7
 8000d0c:	08000de3 	.word	0x08000de3
 8000d10:	08000de3 	.word	0x08000de3
 8000d14:	08000de3 	.word	0x08000de3
 8000d18:	08000de3 	.word	0x08000de3
 8000d1c:	08000de3 	.word	0x08000de3
 8000d20:	08000de3 	.word	0x08000de3
 8000d24:	08000de3 	.word	0x08000de3
 8000d28:	08000de3 	.word	0x08000de3
 8000d2c:	08000de3 	.word	0x08000de3
 8000d30:	08000de3 	.word	0x08000de3
 8000d34:	08000dd1 	.word	0x08000dd1
 8000d38:	08000de3 	.word	0x08000de3
 8000d3c:	08000de3 	.word	0x08000de3
 8000d40:	08000de3 	.word	0x08000de3
 8000d44:	08000d5d 	.word	0x08000d5d
 8000d48:	08000de3 	.word	0x08000de3
 8000d4c:	08000dd7 	.word	0x08000dd7
 8000d50:	08000de3 	.word	0x08000de3
 8000d54:	08000de3 	.word	0x08000de3
 8000d58:	08000ddd 	.word	0x08000ddd
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	1d1a      	adds	r2, r3, #4
 8000d60:	603a      	str	r2, [r7, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
			for (j = 0; p[j]; j++) ;
 8000d66:	2300      	movs	r3, #0
 8000d68:	647b      	str	r3, [r7, #68]	; 0x44
 8000d6a:	e002      	b.n	8000d72 <xvprintf+0x1aa>
 8000d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d6e:	3301      	adds	r3, #1
 8000d70:	647b      	str	r3, [r7, #68]	; 0x44
 8000d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d76:	4413      	add	r3, r2
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1f6      	bne.n	8000d6c <xvprintf+0x1a4>
			while (!(f & 2) && j++ < w) xputc(' ');
 8000d7e:	e002      	b.n	8000d86 <xvprintf+0x1be>
 8000d80:	2020      	movs	r0, #32
 8000d82:	f7ff fee5 	bl	8000b50 <xputc>
 8000d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d105      	bne.n	8000d9c <xvprintf+0x1d4>
 8000d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	647a      	str	r2, [r7, #68]	; 0x44
 8000d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d8f1      	bhi.n	8000d80 <xvprintf+0x1b8>
			xputs(p);
 8000d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d9e:	f7ff feff 	bl	8000ba0 <xputs>
			while (j++ < w) xputc(' ');
 8000da2:	e002      	b.n	8000daa <xvprintf+0x1e2>
 8000da4:	2020      	movs	r0, #32
 8000da6:	f7ff fed3 	bl	8000b50 <xputc>
 8000daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dac:	1c5a      	adds	r2, r3, #1
 8000dae:	647a      	str	r2, [r7, #68]	; 0x44
 8000db0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d8f6      	bhi.n	8000da4 <xvprintf+0x1dc>
			continue;
 8000db6:	e0b9      	b.n	8000f2c <xvprintf+0x364>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	1d1a      	adds	r2, r3, #4
 8000dbc:	603a      	str	r2, [r7, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fec4 	bl	8000b50 <xputc>
 8000dc8:	e0b0      	b.n	8000f2c <xvprintf+0x364>
		case 'B' :					/* Binary */
			r = 2; break;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dce:	e00e      	b.n	8000dee <xvprintf+0x226>
		case 'O' :					/* Octal */
			r = 8; break;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dd4:	e00b      	b.n	8000dee <xvprintf+0x226>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8000dd6:	230a      	movs	r3, #10
 8000dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dda:	e008      	b.n	8000dee <xvprintf+0x226>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8000ddc:	2310      	movs	r3, #16
 8000dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000de0:	e005      	b.n	8000dee <xvprintf+0x226>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8000de2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff feb2 	bl	8000b50 <xputc>
 8000dec:	e09e      	b.n	8000f2c <xvprintf+0x364>
			} else {		/* int/short/char argument */
				v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 8000dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d005      	beq.n	8000e04 <xvprintf+0x23c>
			v = va_arg(arp, long);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	1d1a      	adds	r2, r3, #4
 8000dfc:	603a      	str	r2, [r7, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
 8000e02:	e00d      	b.n	8000e20 <xvprintf+0x258>
		} else {		/* int/short/char argument */
			v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 8000e04:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e08:	2b44      	cmp	r3, #68	; 0x44
 8000e0a:	d104      	bne.n	8000e16 <xvprintf+0x24e>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	1d1a      	adds	r2, r3, #4
 8000e10:	603a      	str	r2, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	e003      	b.n	8000e1e <xvprintf+0x256>
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	1d1a      	adds	r2, r3, #4
 8000e1a:	603a      	str	r2, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
		}
#endif
		if (d == 'D' && v < 0) {	/* Negative value? */
 8000e20:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e24:	2b44      	cmp	r3, #68	; 0x44
 8000e26:	d109      	bne.n	8000e3c <xvprintf+0x274>
 8000e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	da06      	bge.n	8000e3c <xvprintf+0x274>
			v = 0 - v; f |= 16;
 8000e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e30:	425b      	negs	r3, r3
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
 8000e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e36:	f043 0310 	orr.w	r3, r3, #16
 8000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		i = 0; vs = v;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
		do {
			d = (char)(vs % r); vs /= r;
 8000e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e48:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e4c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000e4e:	fb01 f202 	mul.w	r2, r1, r2
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8000e62:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e66:	2b09      	cmp	r3, #9
 8000e68:	d90b      	bls.n	8000e82 <xvprintf+0x2ba>
 8000e6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e6e:	2b78      	cmp	r3, #120	; 0x78
 8000e70:	d101      	bne.n	8000e76 <xvprintf+0x2ae>
 8000e72:	2227      	movs	r2, #39	; 0x27
 8000e74:	e000      	b.n	8000e78 <xvprintf+0x2b0>
 8000e76:	2207      	movs	r2, #7
 8000e78:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e7c:	4413      	add	r3, r2
 8000e7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			s[i++] = d + '0';
 8000e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e84:	1c5a      	adds	r2, r3, #1
 8000e86:	64ba      	str	r2, [r7, #72]	; 0x48
 8000e88:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000e8c:	3230      	adds	r2, #48	; 0x30
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000e94:	440b      	add	r3, r1
 8000e96:	f803 2c48 	strb.w	r2, [r3, #-72]
		} while (vs != 0 && i < sizeof s);
 8000e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <xvprintf+0x2de>
 8000ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ea2:	2b1f      	cmp	r3, #31
 8000ea4:	d9ce      	bls.n	8000e44 <xvprintf+0x27c>
		if (f & 16) s[i++] = '-';
 8000ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ea8:	f003 0310 	and.w	r3, r3, #16
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d008      	beq.n	8000ec2 <xvprintf+0x2fa>
 8000eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	64ba      	str	r2, [r7, #72]	; 0x48
 8000eb6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000eba:	4413      	add	r3, r2
 8000ebc:	222d      	movs	r2, #45	; 0x2d
 8000ebe:	f803 2c48 	strb.w	r2, [r3, #-72]
		j = i; d = (f & 1) ? '0' : ' ';
 8000ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8000ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <xvprintf+0x30c>
 8000ed0:	2330      	movs	r3, #48	; 0x30
 8000ed2:	e000      	b.n	8000ed6 <xvprintf+0x30e>
 8000ed4:	2320      	movs	r3, #32
 8000ed6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		while (!(f & 2) && j++ < w) xputc(d);
 8000eda:	e004      	b.n	8000ee6 <xvprintf+0x31e>
 8000edc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fe35 	bl	8000b50 <xputc>
 8000ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d105      	bne.n	8000efc <xvprintf+0x334>
 8000ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	647a      	str	r2, [r7, #68]	; 0x44
 8000ef6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8ef      	bhi.n	8000edc <xvprintf+0x314>
		do xputc(s[--i]); while (i != 0);
 8000efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000efe:	3b01      	subs	r3, #1
 8000f00:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f02:	f107 0208 	add.w	r2, r7, #8
 8000f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f08:	4413      	add	r3, r2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fe1f 	bl	8000b50 <xputc>
 8000f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1f1      	bne.n	8000efc <xvprintf+0x334>
		while (j++ < w) xputc(' ');
 8000f18:	e002      	b.n	8000f20 <xvprintf+0x358>
 8000f1a:	2020      	movs	r0, #32
 8000f1c:	f7ff fe18 	bl	8000b50 <xputc>
 8000f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	647a      	str	r2, [r7, #68]	; 0x44
 8000f26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f6      	bhi.n	8000f1a <xvprintf+0x352>
		c = *fmt++;					/* Get a format character */
 8000f2c:	e651      	b.n	8000bd2 <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 8000f2e:	bf00      	nop
 8000f30:	e000      	b.n	8000f34 <xvprintf+0x36c>
		if (!c) break;				/* End of format? */
 8000f32:	bf00      	nop
	}
}
 8000f34:	bf00      	nop
 8000f36:	3750      	adds	r7, #80	; 0x50
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8000f3c:	b40f      	push	{r0, r1, r2, r3}
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	6938      	ldr	r0, [r7, #16]
 8000f4e:	f7ff fe3b 	bl	8000bc8 <xvprintf>
	va_end(arp);
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f5c:	b004      	add	sp, #16
 8000f5e:	4770      	bx	lr

08000f60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f62:	e003      	b.n	8000f6c <LoopCopyDataInit>

08000f64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8000f66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f6a:	3104      	adds	r1, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8000f70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f74:	d3f6      	bcc.n	8000f64 <CopyDataInit>
  ldr r2, =_sbss
 8000f76:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8000f78:	e002      	b.n	8000f80 <LoopFillZerobss>

08000f7a <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f7c:	f842 3b04 	str.w	r3, [r2], #4

08000f80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8000f82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f84:	d3f9      	bcc.n	8000f7a <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f86:	f7ff fddd 	bl	8000b44 <SystemInit>
/* Call the application's entry point.*/
  bl main
 8000f8a:	f7ff fb89 	bl	80006a0 <main>
  bx lr
 8000f8e:	4770      	bx	lr
  ldr r3, =_sidata
 8000f90:	08002b24 	.word	0x08002b24
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f98:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000f9c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000fa0:	200000d8 	.word	0x200000d8

08000fa4 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC1_2_IRQHandler>
	...

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_Init+0x28>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_Init+0x28>)
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f945 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 f808 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fcca 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40022000 	.word	0x40022000

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f95d 	bl	80012b2 <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f925 	bl	800125e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_IncTick+0x1c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <HAL_IncTick+0x20>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a03      	ldr	r2, [pc, #12]	; (8001054 <HAL_IncTick+0x20>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	20000008 	.word	0x20000008
 8001054:	200000d4 	.word	0x200000d4

08001058 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b02      	ldr	r3, [pc, #8]	; (8001068 <HAL_GetTick+0x10>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	200000d4 	.word	0x200000d4

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff fff0 	bl	8001058 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_Delay+0x40>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffe0 	bl	8001058 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000008 	.word	0x20000008

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db0b      	blt.n	800113e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 021f 	and.w	r2, r3, #31
 800112c:	4906      	ldr	r1, [pc, #24]	; (8001148 <__NVIC_EnableIRQ+0x34>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	2001      	movs	r0, #1
 8001136:	fa00 f202 	lsl.w	r2, r0, r2
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	e000e100 	.word	0xe000e100

0800114c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	db0a      	blt.n	8001176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	b2da      	uxtb	r2, r3
 8001164:	490c      	ldr	r1, [pc, #48]	; (8001198 <__NVIC_SetPriority+0x4c>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	0112      	lsls	r2, r2, #4
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	440b      	add	r3, r1
 8001170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001174:	e00a      	b.n	800118c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4908      	ldr	r1, [pc, #32]	; (800119c <__NVIC_SetPriority+0x50>)
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	3b04      	subs	r3, #4
 8001184:	0112      	lsls	r2, r2, #4
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	440b      	add	r3, r1
 800118a:	761a      	strb	r2, [r3, #24]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000e100 	.word	0xe000e100
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	; 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f1c3 0307 	rsb	r3, r3, #7
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	bf28      	it	cs
 80011be:	2304      	movcs	r3, #4
 80011c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3304      	adds	r3, #4
 80011c6:	2b06      	cmp	r3, #6
 80011c8:	d902      	bls.n	80011d0 <NVIC_EncodePriority+0x30>
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3b03      	subs	r3, #3
 80011ce:	e000      	b.n	80011d2 <NVIC_EncodePriority+0x32>
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	f04f 32ff 	mov.w	r2, #4294967295
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43da      	mvns	r2, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	401a      	ands	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	43d9      	mvns	r1, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	4313      	orrs	r3, r2
         );
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3724      	adds	r7, #36	; 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff90 	bl	800114c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff2d 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff42 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff90 	bl	80011a0 <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5f 	bl	800114c <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff35 	bl	8001114 <__NVIC_EnableIRQ>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffa2 	bl	8001204 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d005      	beq.n	80012ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2204      	movs	r2, #4
 80012e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	e0d6      	b.n	800149c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 020e 	bic.w	r2, r2, #14
 80012fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0201 	bic.w	r2, r2, #1
 800130c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	4b64      	ldr	r3, [pc, #400]	; (80014a8 <HAL_DMA_Abort_IT+0x1dc>)
 8001316:	429a      	cmp	r2, r3
 8001318:	d958      	bls.n	80013cc <HAL_DMA_Abort_IT+0x100>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a63      	ldr	r2, [pc, #396]	; (80014ac <HAL_DMA_Abort_IT+0x1e0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d04f      	beq.n	80013c4 <HAL_DMA_Abort_IT+0xf8>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a61      	ldr	r2, [pc, #388]	; (80014b0 <HAL_DMA_Abort_IT+0x1e4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d048      	beq.n	80013c0 <HAL_DMA_Abort_IT+0xf4>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a60      	ldr	r2, [pc, #384]	; (80014b4 <HAL_DMA_Abort_IT+0x1e8>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d040      	beq.n	80013ba <HAL_DMA_Abort_IT+0xee>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a5e      	ldr	r2, [pc, #376]	; (80014b8 <HAL_DMA_Abort_IT+0x1ec>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d038      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xe8>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a5d      	ldr	r2, [pc, #372]	; (80014bc <HAL_DMA_Abort_IT+0x1f0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d030      	beq.n	80013ae <HAL_DMA_Abort_IT+0xe2>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a5b      	ldr	r2, [pc, #364]	; (80014c0 <HAL_DMA_Abort_IT+0x1f4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d028      	beq.n	80013a8 <HAL_DMA_Abort_IT+0xdc>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a53      	ldr	r2, [pc, #332]	; (80014a8 <HAL_DMA_Abort_IT+0x1dc>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d020      	beq.n	80013a2 <HAL_DMA_Abort_IT+0xd6>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a57      	ldr	r2, [pc, #348]	; (80014c4 <HAL_DMA_Abort_IT+0x1f8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d019      	beq.n	800139e <HAL_DMA_Abort_IT+0xd2>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a56      	ldr	r2, [pc, #344]	; (80014c8 <HAL_DMA_Abort_IT+0x1fc>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d012      	beq.n	800139a <HAL_DMA_Abort_IT+0xce>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a54      	ldr	r2, [pc, #336]	; (80014cc <HAL_DMA_Abort_IT+0x200>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d00a      	beq.n	8001394 <HAL_DMA_Abort_IT+0xc8>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a53      	ldr	r2, [pc, #332]	; (80014d0 <HAL_DMA_Abort_IT+0x204>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d102      	bne.n	800138e <HAL_DMA_Abort_IT+0xc2>
 8001388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138c:	e01b      	b.n	80013c6 <HAL_DMA_Abort_IT+0xfa>
 800138e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001392:	e018      	b.n	80013c6 <HAL_DMA_Abort_IT+0xfa>
 8001394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001398:	e015      	b.n	80013c6 <HAL_DMA_Abort_IT+0xfa>
 800139a:	2310      	movs	r3, #16
 800139c:	e013      	b.n	80013c6 <HAL_DMA_Abort_IT+0xfa>
 800139e:	2301      	movs	r3, #1
 80013a0:	e011      	b.n	80013c6 <HAL_DMA_Abort_IT+0xfa>
 80013a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013a6:	e00e      	b.n	80013c6 <HAL_DMA_Abort_IT+0xfa>
 80013a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013ac:	e00b      	b.n	80013c6 <HAL_DMA_Abort_IT+0xfa>
 80013ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b2:	e008      	b.n	80013c6 <HAL_DMA_Abort_IT+0xfa>
 80013b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b8:	e005      	b.n	80013c6 <HAL_DMA_Abort_IT+0xfa>
 80013ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013be:	e002      	b.n	80013c6 <HAL_DMA_Abort_IT+0xfa>
 80013c0:	2310      	movs	r3, #16
 80013c2:	e000      	b.n	80013c6 <HAL_DMA_Abort_IT+0xfa>
 80013c4:	2301      	movs	r3, #1
 80013c6:	4a43      	ldr	r2, [pc, #268]	; (80014d4 <HAL_DMA_Abort_IT+0x208>)
 80013c8:	6053      	str	r3, [r2, #4]
 80013ca:	e057      	b.n	800147c <HAL_DMA_Abort_IT+0x1b0>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a36      	ldr	r2, [pc, #216]	; (80014ac <HAL_DMA_Abort_IT+0x1e0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d04f      	beq.n	8001476 <HAL_DMA_Abort_IT+0x1aa>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a35      	ldr	r2, [pc, #212]	; (80014b0 <HAL_DMA_Abort_IT+0x1e4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d048      	beq.n	8001472 <HAL_DMA_Abort_IT+0x1a6>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a33      	ldr	r2, [pc, #204]	; (80014b4 <HAL_DMA_Abort_IT+0x1e8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d040      	beq.n	800146c <HAL_DMA_Abort_IT+0x1a0>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a32      	ldr	r2, [pc, #200]	; (80014b8 <HAL_DMA_Abort_IT+0x1ec>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d038      	beq.n	8001466 <HAL_DMA_Abort_IT+0x19a>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a30      	ldr	r2, [pc, #192]	; (80014bc <HAL_DMA_Abort_IT+0x1f0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d030      	beq.n	8001460 <HAL_DMA_Abort_IT+0x194>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a2f      	ldr	r2, [pc, #188]	; (80014c0 <HAL_DMA_Abort_IT+0x1f4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d028      	beq.n	800145a <HAL_DMA_Abort_IT+0x18e>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a26      	ldr	r2, [pc, #152]	; (80014a8 <HAL_DMA_Abort_IT+0x1dc>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d020      	beq.n	8001454 <HAL_DMA_Abort_IT+0x188>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a2b      	ldr	r2, [pc, #172]	; (80014c4 <HAL_DMA_Abort_IT+0x1f8>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d019      	beq.n	8001450 <HAL_DMA_Abort_IT+0x184>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a29      	ldr	r2, [pc, #164]	; (80014c8 <HAL_DMA_Abort_IT+0x1fc>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d012      	beq.n	800144c <HAL_DMA_Abort_IT+0x180>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a28      	ldr	r2, [pc, #160]	; (80014cc <HAL_DMA_Abort_IT+0x200>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d00a      	beq.n	8001446 <HAL_DMA_Abort_IT+0x17a>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a26      	ldr	r2, [pc, #152]	; (80014d0 <HAL_DMA_Abort_IT+0x204>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d102      	bne.n	8001440 <HAL_DMA_Abort_IT+0x174>
 800143a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143e:	e01b      	b.n	8001478 <HAL_DMA_Abort_IT+0x1ac>
 8001440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001444:	e018      	b.n	8001478 <HAL_DMA_Abort_IT+0x1ac>
 8001446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800144a:	e015      	b.n	8001478 <HAL_DMA_Abort_IT+0x1ac>
 800144c:	2310      	movs	r3, #16
 800144e:	e013      	b.n	8001478 <HAL_DMA_Abort_IT+0x1ac>
 8001450:	2301      	movs	r3, #1
 8001452:	e011      	b.n	8001478 <HAL_DMA_Abort_IT+0x1ac>
 8001454:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001458:	e00e      	b.n	8001478 <HAL_DMA_Abort_IT+0x1ac>
 800145a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800145e:	e00b      	b.n	8001478 <HAL_DMA_Abort_IT+0x1ac>
 8001460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001464:	e008      	b.n	8001478 <HAL_DMA_Abort_IT+0x1ac>
 8001466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146a:	e005      	b.n	8001478 <HAL_DMA_Abort_IT+0x1ac>
 800146c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001470:	e002      	b.n	8001478 <HAL_DMA_Abort_IT+0x1ac>
 8001472:	2310      	movs	r3, #16
 8001474:	e000      	b.n	8001478 <HAL_DMA_Abort_IT+0x1ac>
 8001476:	2301      	movs	r3, #1
 8001478:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_DMA_Abort_IT+0x20c>)
 800147a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	4798      	blx	r3
    } 
  }
  return status;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40020080 	.word	0x40020080
 80014ac:	40020008 	.word	0x40020008
 80014b0:	4002001c 	.word	0x4002001c
 80014b4:	40020030 	.word	0x40020030
 80014b8:	40020044 	.word	0x40020044
 80014bc:	40020058 	.word	0x40020058
 80014c0:	4002006c 	.word	0x4002006c
 80014c4:	40020408 	.word	0x40020408
 80014c8:	4002041c 	.word	0x4002041c
 80014cc:	40020430 	.word	0x40020430
 80014d0:	40020444 	.word	0x40020444
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40020000 	.word	0x40020000

080014dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014dc:	b480      	push	{r7}
 80014de:	b08b      	sub	sp, #44	; 0x2c
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ee:	e127      	b.n	8001740 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014f0:	2201      	movs	r2, #1
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	429a      	cmp	r2, r3
 800150a:	f040 8116 	bne.w	800173a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b12      	cmp	r3, #18
 8001514:	d034      	beq.n	8001580 <HAL_GPIO_Init+0xa4>
 8001516:	2b12      	cmp	r3, #18
 8001518:	d80d      	bhi.n	8001536 <HAL_GPIO_Init+0x5a>
 800151a:	2b02      	cmp	r3, #2
 800151c:	d02b      	beq.n	8001576 <HAL_GPIO_Init+0x9a>
 800151e:	2b02      	cmp	r3, #2
 8001520:	d804      	bhi.n	800152c <HAL_GPIO_Init+0x50>
 8001522:	2b00      	cmp	r3, #0
 8001524:	d031      	beq.n	800158a <HAL_GPIO_Init+0xae>
 8001526:	2b01      	cmp	r3, #1
 8001528:	d01c      	beq.n	8001564 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800152a:	e048      	b.n	80015be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800152c:	2b03      	cmp	r3, #3
 800152e:	d043      	beq.n	80015b8 <HAL_GPIO_Init+0xdc>
 8001530:	2b11      	cmp	r3, #17
 8001532:	d01b      	beq.n	800156c <HAL_GPIO_Init+0x90>
          break;
 8001534:	e043      	b.n	80015be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001536:	4a89      	ldr	r2, [pc, #548]	; (800175c <HAL_GPIO_Init+0x280>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d026      	beq.n	800158a <HAL_GPIO_Init+0xae>
 800153c:	4a87      	ldr	r2, [pc, #540]	; (800175c <HAL_GPIO_Init+0x280>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d806      	bhi.n	8001550 <HAL_GPIO_Init+0x74>
 8001542:	4a87      	ldr	r2, [pc, #540]	; (8001760 <HAL_GPIO_Init+0x284>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d020      	beq.n	800158a <HAL_GPIO_Init+0xae>
 8001548:	4a86      	ldr	r2, [pc, #536]	; (8001764 <HAL_GPIO_Init+0x288>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d01d      	beq.n	800158a <HAL_GPIO_Init+0xae>
          break;
 800154e:	e036      	b.n	80015be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001550:	4a85      	ldr	r2, [pc, #532]	; (8001768 <HAL_GPIO_Init+0x28c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d019      	beq.n	800158a <HAL_GPIO_Init+0xae>
 8001556:	4a85      	ldr	r2, [pc, #532]	; (800176c <HAL_GPIO_Init+0x290>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d016      	beq.n	800158a <HAL_GPIO_Init+0xae>
 800155c:	4a84      	ldr	r2, [pc, #528]	; (8001770 <HAL_GPIO_Init+0x294>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d013      	beq.n	800158a <HAL_GPIO_Init+0xae>
          break;
 8001562:	e02c      	b.n	80015be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	623b      	str	r3, [r7, #32]
          break;
 800156a:	e028      	b.n	80015be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	3304      	adds	r3, #4
 8001572:	623b      	str	r3, [r7, #32]
          break;
 8001574:	e023      	b.n	80015be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	3308      	adds	r3, #8
 800157c:	623b      	str	r3, [r7, #32]
          break;
 800157e:	e01e      	b.n	80015be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	330c      	adds	r3, #12
 8001586:	623b      	str	r3, [r7, #32]
          break;
 8001588:	e019      	b.n	80015be <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001592:	2304      	movs	r3, #4
 8001594:	623b      	str	r3, [r7, #32]
          break;
 8001596:	e012      	b.n	80015be <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d105      	bne.n	80015ac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a0:	2308      	movs	r3, #8
 80015a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	611a      	str	r2, [r3, #16]
          break;
 80015aa:	e008      	b.n	80015be <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015ac:	2308      	movs	r3, #8
 80015ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	615a      	str	r2, [r3, #20]
          break;
 80015b6:	e002      	b.n	80015be <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
          break;
 80015bc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	2bff      	cmp	r3, #255	; 0xff
 80015c2:	d801      	bhi.n	80015c8 <HAL_GPIO_Init+0xec>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	e001      	b.n	80015cc <HAL_GPIO_Init+0xf0>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3304      	adds	r3, #4
 80015cc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2bff      	cmp	r3, #255	; 0xff
 80015d2:	d802      	bhi.n	80015da <HAL_GPIO_Init+0xfe>
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	e002      	b.n	80015e0 <HAL_GPIO_Init+0x104>
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	3b08      	subs	r3, #8
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	210f      	movs	r1, #15
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	401a      	ands	r2, r3
 80015f2:	6a39      	ldr	r1, [r7, #32]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	431a      	orrs	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 8096 	beq.w	800173a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800160e:	4b59      	ldr	r3, [pc, #356]	; (8001774 <HAL_GPIO_Init+0x298>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	4a58      	ldr	r2, [pc, #352]	; (8001774 <HAL_GPIO_Init+0x298>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6193      	str	r3, [r2, #24]
 800161a:	4b56      	ldr	r3, [pc, #344]	; (8001774 <HAL_GPIO_Init+0x298>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001626:	4a54      	ldr	r2, [pc, #336]	; (8001778 <HAL_GPIO_Init+0x29c>)
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	3302      	adds	r3, #2
 800162e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001632:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	220f      	movs	r2, #15
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4013      	ands	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4b      	ldr	r2, [pc, #300]	; (800177c <HAL_GPIO_Init+0x2a0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d013      	beq.n	800167a <HAL_GPIO_Init+0x19e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4a      	ldr	r2, [pc, #296]	; (8001780 <HAL_GPIO_Init+0x2a4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d00d      	beq.n	8001676 <HAL_GPIO_Init+0x19a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a49      	ldr	r2, [pc, #292]	; (8001784 <HAL_GPIO_Init+0x2a8>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d007      	beq.n	8001672 <HAL_GPIO_Init+0x196>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a48      	ldr	r2, [pc, #288]	; (8001788 <HAL_GPIO_Init+0x2ac>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_GPIO_Init+0x192>
 800166a:	2303      	movs	r3, #3
 800166c:	e006      	b.n	800167c <HAL_GPIO_Init+0x1a0>
 800166e:	2304      	movs	r3, #4
 8001670:	e004      	b.n	800167c <HAL_GPIO_Init+0x1a0>
 8001672:	2302      	movs	r3, #2
 8001674:	e002      	b.n	800167c <HAL_GPIO_Init+0x1a0>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <HAL_GPIO_Init+0x1a0>
 800167a:	2300      	movs	r3, #0
 800167c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167e:	f002 0203 	and.w	r2, r2, #3
 8001682:	0092      	lsls	r2, r2, #2
 8001684:	4093      	lsls	r3, r2
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4313      	orrs	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800168c:	493a      	ldr	r1, [pc, #232]	; (8001778 <HAL_GPIO_Init+0x29c>)
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	3302      	adds	r3, #2
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016a6:	4b39      	ldr	r3, [pc, #228]	; (800178c <HAL_GPIO_Init+0x2b0>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4938      	ldr	r1, [pc, #224]	; (800178c <HAL_GPIO_Init+0x2b0>)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
 80016b2:	e006      	b.n	80016c2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016b4:	4b35      	ldr	r3, [pc, #212]	; (800178c <HAL_GPIO_Init+0x2b0>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	4933      	ldr	r1, [pc, #204]	; (800178c <HAL_GPIO_Init+0x2b0>)
 80016be:	4013      	ands	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d006      	beq.n	80016dc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016ce:	4b2f      	ldr	r3, [pc, #188]	; (800178c <HAL_GPIO_Init+0x2b0>)
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	492e      	ldr	r1, [pc, #184]	; (800178c <HAL_GPIO_Init+0x2b0>)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
 80016da:	e006      	b.n	80016ea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_GPIO_Init+0x2b0>)
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	4929      	ldr	r1, [pc, #164]	; (800178c <HAL_GPIO_Init+0x2b0>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d006      	beq.n	8001704 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016f6:	4b25      	ldr	r3, [pc, #148]	; (800178c <HAL_GPIO_Init+0x2b0>)
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	4924      	ldr	r1, [pc, #144]	; (800178c <HAL_GPIO_Init+0x2b0>)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
 8001702:	e006      	b.n	8001712 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001704:	4b21      	ldr	r3, [pc, #132]	; (800178c <HAL_GPIO_Init+0x2b0>)
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	43db      	mvns	r3, r3
 800170c:	491f      	ldr	r1, [pc, #124]	; (800178c <HAL_GPIO_Init+0x2b0>)
 800170e:	4013      	ands	r3, r2
 8001710:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_GPIO_Init+0x2b0>)
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	491a      	ldr	r1, [pc, #104]	; (800178c <HAL_GPIO_Init+0x2b0>)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	60cb      	str	r3, [r1, #12]
 800172a:	e006      	b.n	800173a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <HAL_GPIO_Init+0x2b0>)
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	43db      	mvns	r3, r3
 8001734:	4915      	ldr	r1, [pc, #84]	; (800178c <HAL_GPIO_Init+0x2b0>)
 8001736:	4013      	ands	r3, r2
 8001738:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	3301      	adds	r3, #1
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	fa22 f303 	lsr.w	r3, r2, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	f47f aed0 	bne.w	80014f0 <HAL_GPIO_Init+0x14>
  }
}
 8001750:	bf00      	nop
 8001752:	372c      	adds	r7, #44	; 0x2c
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	10210000 	.word	0x10210000
 8001760:	10110000 	.word	0x10110000
 8001764:	10120000 	.word	0x10120000
 8001768:	10310000 	.word	0x10310000
 800176c:	10320000 	.word	0x10320000
 8001770:	10220000 	.word	0x10220000
 8001774:	40021000 	.word	0x40021000
 8001778:	40010000 	.word	0x40010000
 800177c:	40010800 	.word	0x40010800
 8001780:	40010c00 	.word	0x40010c00
 8001784:	40011000 	.word	0x40011000
 8001788:	40011400 	.word	0x40011400
 800178c:	40010400 	.word	0x40010400

08001790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
 800179c:	4613      	mov	r3, r2
 800179e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a0:	787b      	ldrb	r3, [r7, #1]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017ac:	e003      	b.n	80017b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	041a      	lsls	r2, r3, #16
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	611a      	str	r2, [r3, #16]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e304      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8087 	beq.w	80018ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e0:	4b92      	ldr	r3, [pc, #584]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 030c 	and.w	r3, r3, #12
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d00c      	beq.n	8001806 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017ec:	4b8f      	ldr	r3, [pc, #572]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d112      	bne.n	800181e <HAL_RCC_OscConfig+0x5e>
 80017f8:	4b8c      	ldr	r3, [pc, #560]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001804:	d10b      	bne.n	800181e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001806:	4b89      	ldr	r3, [pc, #548]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d06c      	beq.n	80018ec <HAL_RCC_OscConfig+0x12c>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d168      	bne.n	80018ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e2de      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x76>
 8001828:	4b80      	ldr	r3, [pc, #512]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a7f      	ldr	r2, [pc, #508]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800182e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	e02e      	b.n	8001894 <HAL_RCC_OscConfig+0xd4>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x98>
 800183e:	4b7b      	ldr	r3, [pc, #492]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a7a      	ldr	r2, [pc, #488]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b78      	ldr	r3, [pc, #480]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a77      	ldr	r2, [pc, #476]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e01d      	b.n	8001894 <HAL_RCC_OscConfig+0xd4>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0xbc>
 8001862:	4b72      	ldr	r3, [pc, #456]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a71      	ldr	r2, [pc, #452]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b6f      	ldr	r3, [pc, #444]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6e      	ldr	r2, [pc, #440]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e00b      	b.n	8001894 <HAL_RCC_OscConfig+0xd4>
 800187c:	4b6b      	ldr	r3, [pc, #428]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a6a      	ldr	r2, [pc, #424]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b68      	ldr	r3, [pc, #416]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a67      	ldr	r2, [pc, #412]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800188e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001892:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff fbdc 	bl	8001058 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff fbd8 	bl	8001058 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e292      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0xe4>
 80018c2:	e014      	b.n	80018ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fbc8 	bl	8001058 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff fbc4 	bl	8001058 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	; 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e27e      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018de:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x10c>
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d063      	beq.n	80019c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018fa:	4b4c      	ldr	r3, [pc, #304]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00b      	beq.n	800191e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001906:	4b49      	ldr	r3, [pc, #292]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b08      	cmp	r3, #8
 8001910:	d11c      	bne.n	800194c <HAL_RCC_OscConfig+0x18c>
 8001912:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d116      	bne.n	800194c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191e:	4b43      	ldr	r3, [pc, #268]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_RCC_OscConfig+0x176>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d001      	beq.n	8001936 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e252      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4939      	ldr	r1, [pc, #228]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	e03a      	b.n	80019c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001954:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff fb7d 	bl	8001058 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff fb79 	bl	8001058 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e233      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4927      	ldr	r1, [pc, #156]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff fb5c 	bl	8001058 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a4:	f7ff fb58 	bl	8001058 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e212      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d03a      	beq.n	8001a44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d019      	beq.n	8001a0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_RCC_OscConfig+0x274>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7ff fb3c 	bl	8001058 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e4:	f7ff fb38 	bl	8001058 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e1f2      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a02:	2001      	movs	r0, #1
 8001a04:	f000 fbca 	bl	800219c <RCC_Delay>
 8001a08:	e01c      	b.n	8001a44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a10:	f7ff fb22 	bl	8001058 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a16:	e00f      	b.n	8001a38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff fb1e 	bl	8001058 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d908      	bls.n	8001a38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e1d8      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	42420000 	.word	0x42420000
 8001a34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a38:	4b9b      	ldr	r3, [pc, #620]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1e9      	bne.n	8001a18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80a6 	beq.w	8001b9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a56:	4b94      	ldr	r3, [pc, #592]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10d      	bne.n	8001a7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b91      	ldr	r3, [pc, #580]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a90      	ldr	r2, [pc, #576]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b8e      	ldr	r3, [pc, #568]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7e:	4b8b      	ldr	r3, [pc, #556]	; (8001cac <HAL_RCC_OscConfig+0x4ec>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d118      	bne.n	8001abc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a8a:	4b88      	ldr	r3, [pc, #544]	; (8001cac <HAL_RCC_OscConfig+0x4ec>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a87      	ldr	r2, [pc, #540]	; (8001cac <HAL_RCC_OscConfig+0x4ec>)
 8001a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a96:	f7ff fadf 	bl	8001058 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9e:	f7ff fadb 	bl	8001058 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b64      	cmp	r3, #100	; 0x64
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e195      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab0:	4b7e      	ldr	r3, [pc, #504]	; (8001cac <HAL_RCC_OscConfig+0x4ec>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d106      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x312>
 8001ac4:	4b78      	ldr	r3, [pc, #480]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4a77      	ldr	r2, [pc, #476]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6213      	str	r3, [r2, #32]
 8001ad0:	e02d      	b.n	8001b2e <HAL_RCC_OscConfig+0x36e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x334>
 8001ada:	4b73      	ldr	r3, [pc, #460]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	4a72      	ldr	r2, [pc, #456]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	6213      	str	r3, [r2, #32]
 8001ae6:	4b70      	ldr	r3, [pc, #448]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	4a6f      	ldr	r2, [pc, #444]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001aec:	f023 0304 	bic.w	r3, r3, #4
 8001af0:	6213      	str	r3, [r2, #32]
 8001af2:	e01c      	b.n	8001b2e <HAL_RCC_OscConfig+0x36e>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	2b05      	cmp	r3, #5
 8001afa:	d10c      	bne.n	8001b16 <HAL_RCC_OscConfig+0x356>
 8001afc:	4b6a      	ldr	r3, [pc, #424]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4a69      	ldr	r2, [pc, #420]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	6213      	str	r3, [r2, #32]
 8001b08:	4b67      	ldr	r3, [pc, #412]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4a66      	ldr	r2, [pc, #408]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6213      	str	r3, [r2, #32]
 8001b14:	e00b      	b.n	8001b2e <HAL_RCC_OscConfig+0x36e>
 8001b16:	4b64      	ldr	r3, [pc, #400]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4a63      	ldr	r2, [pc, #396]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6213      	str	r3, [r2, #32]
 8001b22:	4b61      	ldr	r3, [pc, #388]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4a60      	ldr	r2, [pc, #384]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d015      	beq.n	8001b62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b36:	f7ff fa8f 	bl	8001058 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3c:	e00a      	b.n	8001b54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7ff fa8b 	bl	8001058 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e143      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b54:	4b54      	ldr	r3, [pc, #336]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ee      	beq.n	8001b3e <HAL_RCC_OscConfig+0x37e>
 8001b60:	e014      	b.n	8001b8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fa79 	bl	8001058 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff fa75 	bl	8001058 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e12d      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b80:	4b49      	ldr	r3, [pc, #292]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ee      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d105      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b92:	4b45      	ldr	r3, [pc, #276]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a44      	ldr	r2, [pc, #272]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 808c 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001ba8:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001bb6:	4b3c      	ldr	r3, [pc, #240]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d108      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001bc2:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e103      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d14e      	bne.n	8001c7a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001bdc:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d009      	beq.n	8001bfc <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001be8:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0ef      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001bfc:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <HAL_RCC_OscConfig+0x4f0>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff fa29 	bl	8001058 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001c0a:	f7ff fa25 	bl	8001058 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b64      	cmp	r3, #100	; 0x64
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e0df      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001c28:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c34:	491c      	ldr	r1, [pc, #112]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4918      	ldr	r1, [pc, #96]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_RCC_OscConfig+0x4f0>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7ff fa01 	bl	8001058 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001c5a:	f7ff f9fd 	bl	8001058 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b64      	cmp	r3, #100	; 0x64
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e0b7      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x49a>
 8001c78:	e022      	b.n	8001cc0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_RCC_OscConfig+0x4e8>)
 8001c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_RCC_OscConfig+0x4f0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f9e4 	bl	8001058 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001c92:	e00f      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001c94:	f7ff f9e0 	bl	8001058 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	; 0x64
 8001ca0:	d908      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e09a      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40007000 	.word	0x40007000
 8001cb0:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001cb4:	4b4b      	ldr	r3, [pc, #300]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e9      	bne.n	8001c94 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 8088 	beq.w	8001dda <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cca:	4b46      	ldr	r3, [pc, #280]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d068      	beq.n	8001da8 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d14d      	bne.n	8001d7a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	4b42      	ldr	r3, [pc, #264]	; (8001de8 <HAL_RCC_OscConfig+0x628>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f9b8 	bl	8001058 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff f9b4 	bl	8001058 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e06e      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfe:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d12:	d10f      	bne.n	8001d34 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001d14:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4931      	ldr	r1, [pc, #196]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d22:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	f023 020f 	bic.w	r2, r3, #15
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	492d      	ldr	r1, [pc, #180]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d34:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	430b      	orrs	r3, r1
 8001d46:	4927      	ldr	r1, [pc, #156]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d4c:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <HAL_RCC_OscConfig+0x628>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7ff f981 	bl	8001058 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7ff f97d 	bl	8001058 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e037      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x59a>
 8001d78:	e02f      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <HAL_RCC_OscConfig+0x628>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff f96a 	bl	8001058 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7ff f966 	bl	8001058 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e020      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x5c8>
 8001da6:	e018      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e013      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	42420060 	.word	0x42420060

08001dec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0d0      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b6a      	ldr	r3, [pc, #424]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d910      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b67      	ldr	r3, [pc, #412]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 0207 	bic.w	r2, r3, #7
 8001e16:	4965      	ldr	r1, [pc, #404]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b63      	ldr	r3, [pc, #396]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0b8      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d020      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e48:	4b59      	ldr	r3, [pc, #356]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a58      	ldr	r2, [pc, #352]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e60:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4a52      	ldr	r2, [pc, #328]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6c:	4b50      	ldr	r3, [pc, #320]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	494d      	ldr	r1, [pc, #308]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d040      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d115      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e07f      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eaa:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e073      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eba:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e06b      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eca:	4b39      	ldr	r3, [pc, #228]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f023 0203 	bic.w	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4936      	ldr	r1, [pc, #216]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001edc:	f7ff f8bc 	bl	8001058 <HAL_GetTick>
 8001ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee4:	f7ff f8b8 	bl	8001058 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e053      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 020c 	and.w	r2, r3, #12
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d1eb      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d210      	bcs.n	8001f3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 0207 	bic.w	r2, r3, #7
 8001f22:	4922      	ldr	r1, [pc, #136]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e032      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4916      	ldr	r1, [pc, #88]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	490e      	ldr	r1, [pc, #56]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f7a:	f000 f821 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8001f7e:	4601      	mov	r1, r0
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8c:	5cd3      	ldrb	r3, [r2, r3]
 8001f8e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <HAL_RCC_ClockConfig+0x1cc>)
 8001f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_ClockConfig+0x1d0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff f81a 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08002afc 	.word	0x08002afc
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc2:	b091      	sub	sp, #68	; 0x44
 8001fc4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001fc6:	4b56      	ldr	r3, [pc, #344]	; (8002120 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fc8:	f107 0414 	add.w	r4, r7, #20
 8001fcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fce:	c407      	stmia	r4!, {r0, r1, r2}
 8001fd0:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001fd2:	4b54      	ldr	r3, [pc, #336]	; (8002124 <HAL_RCC_GetSysClockFreq+0x164>)
 8001fd4:	1d3c      	adds	r4, r7, #4
 8001fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ff8:	4b4b      	ldr	r3, [pc, #300]	; (8002128 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b04      	cmp	r3, #4
 8002006:	d002      	beq.n	800200e <HAL_RCC_GetSysClockFreq+0x4e>
 8002008:	2b08      	cmp	r3, #8
 800200a:	d003      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x54>
 800200c:	e07f      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCC_GetSysClockFreq+0x16c>)
 8002010:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002012:	e07f      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002016:	0c9b      	lsrs	r3, r3, #18
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002020:	4413      	add	r3, r2
 8002022:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d065      	beq.n	80020fe <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_RCC_GetSysClockFreq+0x168>)
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800203e:	4413      	add	r3, r2
 8002040:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002044:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002046:	4b38      	ldr	r3, [pc, #224]	; (8002128 <HAL_RCC_GetSysClockFreq+0x168>)
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d043      	beq.n	80020da <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002052:	4b35      	ldr	r3, [pc, #212]	; (8002128 <HAL_RCC_GetSysClockFreq+0x168>)
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	3301      	adds	r3, #1
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002060:	4b31      	ldr	r3, [pc, #196]	; (8002128 <HAL_RCC_GetSysClockFreq+0x168>)
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	3302      	adds	r3, #2
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	4619      	mov	r1, r3
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002078:	f04f 0400 	mov.w	r4, #0
 800207c:	fb03 f502 	mul.w	r5, r3, r2
 8002080:	fb01 f004 	mul.w	r0, r1, r4
 8002084:	4428      	add	r0, r5
 8002086:	fba1 3403 	umull	r3, r4, r1, r3
 800208a:	1902      	adds	r2, r0, r4
 800208c:	4614      	mov	r4, r2
 800208e:	4a27      	ldr	r2, [pc, #156]	; (800212c <HAL_RCC_GetSysClockFreq+0x16c>)
 8002090:	fb02 f104 	mul.w	r1, r2, r4
 8002094:	2200      	movs	r2, #0
 8002096:	fb02 f203 	mul.w	r2, r2, r3
 800209a:	440a      	add	r2, r1
 800209c:	4923      	ldr	r1, [pc, #140]	; (800212c <HAL_RCC_GetSysClockFreq+0x16c>)
 800209e:	fba3 5601 	umull	r5, r6, r3, r1
 80020a2:	1993      	adds	r3, r2, r6
 80020a4:	461e      	mov	r6, r3
 80020a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a8:	4619      	mov	r1, r3
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b0:	f04f 0400 	mov.w	r4, #0
 80020b4:	fb03 fc02 	mul.w	ip, r3, r2
 80020b8:	fb01 f004 	mul.w	r0, r1, r4
 80020bc:	4460      	add	r0, ip
 80020be:	fba1 3403 	umull	r3, r4, r1, r3
 80020c2:	1902      	adds	r2, r0, r4
 80020c4:	4614      	mov	r4, r2
 80020c6:	461a      	mov	r2, r3
 80020c8:	4623      	mov	r3, r4
 80020ca:	4628      	mov	r0, r5
 80020cc:	4631      	mov	r1, r6
 80020ce:	f7fe f8a9 	bl	8000224 <__aeabi_uldivmod>
 80020d2:	4603      	mov	r3, r0
 80020d4:	460c      	mov	r4, r1
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d8:	e007      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	4a13      	ldr	r2, [pc, #76]	; (800212c <HAL_RCC_GetSysClockFreq+0x16c>)
 80020de:	fb02 f203 	mul.w	r2, r2, r3
 80020e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80020ea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80020ee:	461a      	mov	r2, r3
 80020f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d108      	bne.n	8002108 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80020f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f8:	085b      	lsrs	r3, r3, #1
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020fc:	e004      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002100:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <HAL_RCC_GetSysClockFreq+0x170>)
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8002108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800210c:	e002      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_GetSysClockFreq+0x174>)
 8002110:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002112:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002116:	4618      	mov	r0, r3
 8002118:	3744      	adds	r7, #68	; 0x44
 800211a:	46bd      	mov	sp, r7
 800211c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211e:	bf00      	nop
 8002120:	08002adc 	.word	0x08002adc
 8002124:	08002aec 	.word	0x08002aec
 8002128:	40021000 	.word	0x40021000
 800212c:	00b71b00 	.word	0x00b71b00
 8002130:	003d0900 	.word	0x003d0900
 8002134:	007a1200 	.word	0x007a1200

08002138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <HAL_RCC_GetHCLKFreq+0x10>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	20000000 	.word	0x20000000

0800214c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002150:	f7ff fff2 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 8002154:	4601      	mov	r1, r0
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	4a03      	ldr	r2, [pc, #12]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	08002b0c 	.word	0x08002b0c

08002174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002178:	f7ff ffde 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 800217c:	4601      	mov	r1, r0
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0adb      	lsrs	r3, r3, #11
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4a03      	ldr	r2, [pc, #12]	; (8002198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	08002b0c 	.word	0x08002b0c

0800219c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <RCC_Delay+0x34>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <RCC_Delay+0x38>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0a5b      	lsrs	r3, r3, #9
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021b8:	bf00      	nop
  }
  while (Delay --);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1e5a      	subs	r2, r3, #1
 80021be:	60fa      	str	r2, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f9      	bne.n	80021b8 <RCC_Delay+0x1c>
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000000 	.word	0x20000000
 80021d4:	10624dd3 	.word	0x10624dd3

080021d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e03f      	b.n	800226a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7fe fbde 	bl	80009c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2224      	movs	r2, #36	; 0x24
 8002208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800221a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fb83 	bl	8002928 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695a      	ldr	r2, [r3, #20]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b08a      	sub	sp, #40	; 0x28
 8002276:	af02      	add	r7, sp, #8
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	4613      	mov	r3, r2
 8002280:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b20      	cmp	r3, #32
 8002290:	d17c      	bne.n	800238c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <HAL_UART_Transmit+0x2c>
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e075      	b.n	800238e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_UART_Transmit+0x3e>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e06e      	b.n	800238e <HAL_UART_Transmit+0x11c>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2221      	movs	r2, #33	; 0x21
 80022c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80022c6:	f7fe fec7 	bl	8001058 <HAL_GetTick>
 80022ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	88fa      	ldrh	r2, [r7, #6]
 80022d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	88fa      	ldrh	r2, [r7, #6]
 80022d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022e0:	d108      	bne.n	80022f4 <HAL_UART_Transmit+0x82>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d104      	bne.n	80022f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	e003      	b.n	80022fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002304:	e02a      	b.n	800235c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 f9a7 	bl	8002664 <UART_WaitOnFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e036      	b.n	800238e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10b      	bne.n	800233e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002334:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	3302      	adds	r3, #2
 800233a:	61bb      	str	r3, [r7, #24]
 800233c:	e007      	b.n	800234e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	3301      	adds	r3, #1
 800234c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002352:	b29b      	uxth	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002360:	b29b      	uxth	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1cf      	bne.n	8002306 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2200      	movs	r2, #0
 800236e:	2140      	movs	r1, #64	; 0x40
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f977 	bl	8002664 <UART_WaitOnFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e006      	b.n	800238e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	e000      	b.n	800238e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800238c:	2302      	movs	r3, #2
  }
}
 800238e:	4618      	mov	r0, r3
 8002390:	3720      	adds	r7, #32
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002396:	b480      	push	{r7}
 8002398:	b085      	sub	sp, #20
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	4613      	mov	r3, r2
 80023a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d140      	bne.n	8002432 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_UART_Receive_IT+0x26>
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e039      	b.n	8002434 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_UART_Receive_IT+0x38>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e032      	b.n	8002434 <HAL_UART_Receive_IT+0x9e>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	88fa      	ldrh	r2, [r7, #6]
 80023e0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	88fa      	ldrh	r2, [r7, #6]
 80023e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2222      	movs	r2, #34	; 0x22
 80023f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800240c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0220 	orr.w	r2, r2, #32
 800242c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e000      	b.n	8002434 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002432:	2302      	movs	r3, #2
  }
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
	...

08002440 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002460:	2300      	movs	r3, #0
 8002462:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10d      	bne.n	8002492 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_UART_IRQHandler+0x52>
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f9cc 	bl	8002828 <UART_Receive_IT>
      return;
 8002490:	e0d1      	b.n	8002636 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80b0 	beq.w	80025fa <HAL_UART_IRQHandler+0x1ba>
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_UART_IRQHandler+0x70>
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80a5 	beq.w	80025fa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HAL_UART_IRQHandler+0x90>
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c8:	f043 0201 	orr.w	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_UART_IRQHandler+0xb0>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e8:	f043 0202 	orr.w	r2, r3, #2
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <HAL_UART_IRQHandler+0xd0>
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002508:	f043 0204 	orr.w	r2, r3, #4
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00f      	beq.n	800253a <HAL_UART_IRQHandler+0xfa>
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d104      	bne.n	800252e <HAL_UART_IRQHandler+0xee>
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	f043 0208 	orr.w	r2, r3, #8
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	2b00      	cmp	r3, #0
 8002540:	d078      	beq.n	8002634 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <HAL_UART_IRQHandler+0x11c>
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f966 	bl	8002828 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf14      	ite	ne
 800256a:	2301      	movne	r3, #1
 800256c:	2300      	moveq	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <HAL_UART_IRQHandler+0x144>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d031      	beq.n	80025e8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f8b7 	bl	80026f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d023      	beq.n	80025e0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d013      	beq.n	80025d8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b4:	4a21      	ldr	r2, [pc, #132]	; (800263c <HAL_UART_IRQHandler+0x1fc>)
 80025b6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe fe85 	bl	80012cc <HAL_DMA_Abort_IT>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d016      	beq.n	80025f6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025d2:	4610      	mov	r0, r2
 80025d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d6:	e00e      	b.n	80025f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f83a 	bl	8002652 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025de:	e00a      	b.n	80025f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f836 	bl	8002652 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e6:	e006      	b.n	80025f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f832 	bl	8002652 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80025f4:	e01e      	b.n	8002634 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f6:	bf00      	nop
    return;
 80025f8:	e01c      	b.n	8002634 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_UART_IRQHandler+0x1d6>
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f8a3 	bl	800275a <UART_Transmit_IT>
    return;
 8002614:	e00f      	b.n	8002636 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_UART_IRQHandler+0x1f6>
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8e4 	bl	80027f8 <UART_EndTransmit_IT>
    return;
 8002630:	bf00      	nop
 8002632:	e000      	b.n	8002636 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002634:	bf00      	nop
  }
}
 8002636:	3720      	adds	r7, #32
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	08002733 	.word	0x08002733

08002640 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	4613      	mov	r3, r2
 8002672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002674:	e02c      	b.n	80026d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267c:	d028      	beq.n	80026d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <UART_WaitOnFlagUntilTimeout+0x30>
 8002684:	f7fe fce8 	bl	8001058 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	429a      	cmp	r2, r3
 8002692:	d21d      	bcs.n	80026d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e00f      	b.n	80026f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	4013      	ands	r3, r2
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	429a      	cmp	r2, r3
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d0c3      	beq.n	8002676 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800270e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr

08002732 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff ff80 	bl	8002652 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800275a:	b480      	push	{r7}
 800275c:	b085      	sub	sp, #20
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b21      	cmp	r3, #33	; 0x21
 800276c:	d13e      	bne.n	80027ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002776:	d114      	bne.n	80027a2 <UART_Transmit_IT+0x48>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d110      	bne.n	80027a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002794:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	1c9a      	adds	r2, r3, #2
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	621a      	str	r2, [r3, #32]
 80027a0:	e008      	b.n	80027b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	1c59      	adds	r1, r3, #1
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6211      	str	r1, [r2, #32]
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29b      	uxth	r3, r3
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	4619      	mov	r1, r3
 80027c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10f      	bne.n	80027e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e000      	b.n	80027ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800280e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ff11 	bl	8002640 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b22      	cmp	r3, #34	; 0x22
 800283a:	d170      	bne.n	800291e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002844:	d117      	bne.n	8002876 <UART_Receive_IT+0x4e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d113      	bne.n	8002876 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	b29b      	uxth	r3, r3
 8002860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002864:	b29a      	uxth	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	1c9a      	adds	r2, r3, #2
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
 8002874:	e026      	b.n	80028c4 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800287c:	2300      	movs	r3, #0
 800287e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002888:	d007      	beq.n	800289a <UART_Receive_IT+0x72>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10a      	bne.n	80028a8 <UART_Receive_IT+0x80>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	e008      	b.n	80028ba <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	4619      	mov	r1, r3
 80028d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d120      	bne.n	800291a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0220 	bic.w	r2, r2, #32
 80028e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7fd fe1f 	bl	8000554 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e002      	b.n	8002920 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	e000      	b.n	8002920 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800291e:	2302      	movs	r3, #2
  }
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002962:	f023 030c 	bic.w	r3, r3, #12
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	430b      	orrs	r3, r1
 800296e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a2c      	ldr	r2, [pc, #176]	; (8002a3c <UART_SetConfig+0x114>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d103      	bne.n	8002998 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002990:	f7ff fbf0 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	e002      	b.n	800299e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002998:	f7ff fbd8 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 800299c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	009a      	lsls	r2, r3, #2
 80029a8:	441a      	add	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b4:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <UART_SetConfig+0x118>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	0119      	lsls	r1, r3, #4
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	009a      	lsls	r2, r3, #2
 80029c8:	441a      	add	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029d4:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <UART_SetConfig+0x118>)
 80029d6:	fba3 0302 	umull	r0, r3, r3, r2
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	2064      	movs	r0, #100	; 0x64
 80029de:	fb00 f303 	mul.w	r3, r0, r3
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	3332      	adds	r3, #50	; 0x32
 80029e8:	4a15      	ldr	r2, [pc, #84]	; (8002a40 <UART_SetConfig+0x118>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f4:	4419      	add	r1, r3
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	009a      	lsls	r2, r3, #2
 8002a00:	441a      	add	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <UART_SetConfig+0x118>)
 8002a0e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	2064      	movs	r0, #100	; 0x64
 8002a16:	fb00 f303 	mul.w	r3, r0, r3
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	3332      	adds	r3, #50	; 0x32
 8002a20:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <UART_SetConfig+0x118>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	f003 020f 	and.w	r2, r3, #15
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	440a      	add	r2, r1
 8002a32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a34:	bf00      	nop
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40013800 	.word	0x40013800
 8002a40:	51eb851f 	.word	0x51eb851f

08002a44 <memset>:
 8002a44:	4603      	mov	r3, r0
 8002a46:	4402      	add	r2, r0
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d100      	bne.n	8002a4e <memset+0xa>
 8002a4c:	4770      	bx	lr
 8002a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a52:	e7f9      	b.n	8002a48 <memset+0x4>

08002a54 <_init>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	bf00      	nop
 8002a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5a:	bc08      	pop	{r3}
 8002a5c:	469e      	mov	lr, r3
 8002a5e:	4770      	bx	lr

08002a60 <_fini>:
 8002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a62:	bf00      	nop
 8002a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a66:	bc08      	pop	{r3}
 8002a68:	469e      	mov	lr, r3
 8002a6a:	4770      	bx	lr
